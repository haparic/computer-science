1. What is time complexity and what is its relation to algorithms?
a metric that is used to figure out the runtime of an algorithm based upon how the function is called.
2. What is runtime?
The physical amount of time that it takes an algorithm to complete its task. this is not a concrete number, more of an estimation.
3. How is the runtime of an algorithm calculated?
you must add up how many functions the largest term will have inside the function. you do so by simplifying the expressiona and dropping the constants
4. Name the six types of algorithm growth rates we saw in this checkpoint and list them in order of most efficient to least efficient. Now Google another algorithmic growth rate not covered and place it in the correct spot in your list.
O(1) - constant growth rate
2.  O(log n) - logarithmic growth time.  
3.  O(n) - linear growth rate.
4.  O(n log n) - proportional to n times the base of 2 logarithm of n
5.  O(n^2) - quadratic growth.
6.  O(n^k) - polynomial growth, grows proportional to the k-th power of n, 
7. O(2^n) - exponential growth. doubles n-th times, slowest
5. Choose one of the algorithmic growth rates from the last question and make a comparison to a real-life situation.
logarithmic time- binary search, for example; you could create a code that inputs a number then it tells you if 
the number you are searching for is higher or lower
6. Determine the time complexity of the following snippet of code. It is commonly known as a linear search.

FUNCTION linearSearch(array, target)
 FOR each number in the array
   IF number = target THEN
     RETURN true
   END IF
 END FOR
 RETURN false
END FUNCTION

Answer: 0(n) linear because it calls upon it once through the array. just one calculation in function
7. Determine the time complexity of the following snippet of code.

If you get stuck, read through the graphical representation section again.

FUNCTION foo(array)
 FOR each number in the array
   FOR each number in the array
     print "Hello"
   END FOR
 END FOR
END FUNCTION
Answer: 0(n^2) quadratic because the input is called upon in the function then once again in the for loops 

8. Determine the time complexity of the following snippet of code. It is commonly known as the Fibonacci sequence.

FUNCTION fibonacci(number)
 IF number < 1 THEN
   ERROR
 ELSE IF number = 1 or 2 THEN
   RETURN 1
 ELSE
   CALL fibonacci WITH number - 2 RETURNING twoBack
   CALL fibonacci WITH number - 1 RETURNING oneBack
   RETURN twoBack + oneBack
 END IF
END FUNCTION
Answer: 0(2^n) grows exponentially, called on multiple times so it will scale terribly

9. Out of the code snippets you just saw, which is the most time efficient?
the first one.